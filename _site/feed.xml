<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Personal Blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 22 Jan 2019 19:15:22 +0000</pubDate>
    <lastBuildDate>Tue, 22 Jan 2019 19:15:22 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>How to neatly organise assets in a Rails app</title>
        <description>&lt;p&gt;One of the great things about Rails is that it comes packed with a lot of useful
conventions. I can open open a new Rails application and I immediately know where the
controllers are and how they are mapped to their views. On the other hand, Rails
doesn’t provide much of a guideline about how you should organise your assets. This
is probably a cultural issue: rails developers are usually more proficient
with backend programming than with css or javascript. But there’s also a natural
relationship between assets and views. We can leverage this relationship to map assets
to views, in the same way that views are mapped to controllers.&lt;/p&gt;

&lt;p&gt;First things first, let’s clarify what we want to achieve: &lt;strong&gt;we want to make dead easy to understand which assets assets are used in any part of the app&lt;/strong&gt;. The mapping should also work the other way around: given a css or js file, it should be obvious where in the app is used.
How can we achieve that?&lt;/p&gt;

&lt;p&gt;Let’s say we have a typical rails controller dir:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/controllers
├── admin
│   ├── base_controller.rb
│   ├── dashboard_controller.rb
│   ├── ... other admin controllers
├── api
│   ├── base_controller.rb
│   └── ... other api controllers
├── application_controller.rb
├── authenticated
│   ├── onboarding
│   │   ├── base_controller.rb
│   │   └── ... other onboarding controllers
│   ├── settings
│   │   ├── accounts_controller.rb
│   │   └── ... other settings controllers
│   ├── base_controller.rb
│   ├── .. other authenticated controllers
└── public
    ├── base_controller.rb
    └──  ... other public controllers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is all standard rails with some fairly typical namespacing. At the top level we have
a few namespaces for the main areas of the app: &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticated&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;. &lt;strong&gt;Each one of these main areas have its own base controller and a
specific layout&lt;/strong&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticated&lt;/code&gt; namespace is for pages that can only be seen
by authenticated users and it’s the bulk of the app. Because it’s so big, it has a few subnamespaces for it’s thematic subareas: &lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt; for all the settings controllers, &lt;code class=&quot;highlighter-rouge&quot;&gt;onboarding&lt;/code&gt; for all the controllers dealing with user onboarding.&lt;/p&gt;

&lt;p&gt;Following rails conventions, the views associated with these controller have the
same directory structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/views
├── admin
│   ├── dashboard
│   │   └── show.html.erb
│   ├── ... other admin views
├── api
│   └── ... api jbuilder views
├── authenticated
│   ├── ... authenticated views
│   ├── onboarding
│   │   ├── ... onboarding views
│   ├── settings
│   │   ├── ... settings views
├── layouts
│   ├── admin.html.erb
│   ├── application.html.erb
│   ├── mailer.html.erb
│   └── public.html.erb
├── public
│   └── ... public views
└── shared &amp;lt;- These are partials shared by different controllers
   ├── _error_messages.html.erb
   ├── _flash.html.erb
   └── .. other shared partials
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we have views mapped by convention to controllers, and that makes it very easy
to know which view is used for each controller and what controllers is associated with a view.
&lt;strong&gt;The next natural step is to use the same mapping from vies to stylesheets&lt;/strong&gt;. My stylesheet
dir looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app/assets/stylesheets
├── admin
│   ├── _dashboard.scss &amp;lt;- styles used by all admin/dashboard actions
│   │   └── _show.scss  &amp;lt;- styles used by the admin/dashboard#show action
│   └── shared &amp;lt;- These are partials that are shared by all admin views
│       ├── _layout.scss &amp;lt;- styles for the admin layout
│       ├── _navbar.scss &amp;lt;- Other partials used in
│       └── _sidebar.scss
├── admin.scss
├── authenticated
│   ├── _layout.scss
│   ├── _onboarging.scss  &amp;lt;- These are partials that are shared by all onboarding views
│   ├── settings &amp;lt;- These are partials that are shared by all settings views
│   │   └── subscriptions
│   │       └── _show.scss &amp;lt;- Styles only used in settings/subscriptions/show
│   └── shared &amp;lt;- Common components. These are partials that are shared by all views
│       ├── _card.scss
│       ├── ... other components
│       ├── _spinner.scss
│       └── _thumbs.scss
├── authenticated.scss &amp;lt;- main css for the authenticated layout
├── public
│   ├── _layout.scss
│   └── shared  &amp;lt;- These are partials that are shared by public views
│       └── ... components only used in the public layout
├── public.scss &amp;lt;- main css for the public layout
└── shared &amp;lt;- css shared by all layouts
    ├── _functions.scss
    ├── _mixins.scss
    ├── _variables.scss
    ├── pills.scss
    └── ... other global components
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The directory structure follows the same layout than views and controllers. &lt;strong&gt;The main
rule is to always nest the file name to the most specific folder possible&lt;/strong&gt;. For instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If some styles are only needed in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/views/admin/dashboard/show.html.erb&lt;/code&gt; they will
go in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/stylesheets/admin/dashboard/_show.scss&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If they are shared between actions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;admin/dashboard_controller&lt;/code&gt;, they would go
in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/stylesheets/admin/dashboard.scss&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If they are shared by different admin controllers, they go in
&lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/stylesheets/admin/shared/name_of_the_component.scss&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If they are shared by controllers with different layouts, they go in
&lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/stylesheets/shared/name_of_the_component.scss&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The top level stylesheets just include the folders they need. For instance,
&lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/stylesheets/admin.scss&lt;/code&gt; is just:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;shared/**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;admin/**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These days I mostly use &lt;a href=&quot;https://stimulusjs.org/&quot;&gt;stimulus&lt;/a&gt; for the front end. Stimulus
already comes with sensible file naming convention. But if you still have a lot of
js sprinkles in your app, you can use the same convention to organise &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/javascripts&lt;/code&gt;.
In this way you only need one criteria to organise most of the code in your application:
from controllers, to views, including css and javascript.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/articles/2019/01/22/how-to-organise-assets-rails-app.html</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019/01/22/how-to-organise-assets-rails-app.html</guid>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>Cognitive load in programming: why the brain is the bottleneck</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Controlling complexity is the essence of computer programming.&lt;/p&gt;

  &lt;p&gt;— &lt;em&gt;Brian Kernighan&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In programming we always abhor of complexity. This hatred for complexity has empirical roots: over decades programmers have consistently experienced how complex programs are error prone and cumbersome to change. But we never try to explain why complex programs are harder to modify. Cognitive psychologists, on the other hand, have spent the last few decades studying complexity. They’ve developed a theoretical framework to explain how complexity affects reasoning and errors in thinking. Their conclusions are clear: the brain has a very limited capacity for reasoning. We need to acknowledge these ideas and accept that the brain is the main bottleneck in software development so we can come up with more efficient software design principles.&lt;/p&gt;

&lt;h2 id=&quot;why-progress-is-faster-in-greenfield-projects&quot;&gt;Why progress is faster in greenfield projects?&lt;/h2&gt;

&lt;p&gt;A clear example of how the brain is the bottleneck is legacy code. When you work on a legacy project your progress is slower than when you work on a greenfield project. Why is that? Because to make changes in a greenfield project you need little context, while to make changes in legacy code you must first understand the intricacies of the existing code. In a legacy project you need to load the existing code before making a change. This is slow and expensive.&lt;/p&gt;

&lt;p&gt;For example, in a web application you may have to figure out if changing a class in the login code would also affect the login process in the mobile app. Understanding how login works in the web and mobile apps will take some time and mental effort. None of that is required in a greenfield project, where you may start implementing a login page without having to understand the existing code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Loading context into your brain is very expensive.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.devrant.com/devrant/rant/r_55338_NBSDq.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;working-memory-and-cognitive-load&quot;&gt;Working memory and cognitive load&lt;/h1&gt;

&lt;p&gt;Psychologists have been studying for years the limitations of your brain and the results are humbling. Your brain can only make logical reasoning about concepts available in a short term memory that cognitive psychologists call the &lt;strong&gt;working memory (WM)&lt;/strong&gt;. The working memory is the part of our brain that consciously processes information. It’s very limited: it can only hold up to 4 or 5 elements and it lasts only for about 10 seconds.&lt;/p&gt;

&lt;p&gt;Working memory is also very sensitive to overload. Errors in common tasks, like remembering a sequence of elements or simple mental reasoning, skyrocket when the working memory is over capacity.&lt;/p&gt;

&lt;p&gt;Fortunately, the brain has other systems to store information. Even if the brain has a very limited working memory, it also has a much bigger &lt;strong&gt;long term memory (LTM)&lt;/strong&gt;. The LTM stores information in the form of schemas, which are patterns that help organise and interpret information.&lt;/p&gt;

&lt;p&gt;The working memory and the LTM interact with each other. The brain can spend some of its processing power creating schemas and store them in the LTM. The working memory can also load schemas from the LTM to use them in logical reasoning.&lt;/p&gt;

&lt;p&gt;The load imposed in the working memory at any given moment is called the &lt;strong&gt;cognitive load&lt;/strong&gt;. There are three types of cognitive load:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Intrinsic cognitive load&lt;/strong&gt;: this is related to the intrinsic complexity of the task. For example, adding two numbers is easier than solving a differential equation. There is no way around intrinsic cognitive load.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Extraneous cognitive load&lt;/strong&gt;: this is generated by the manner in which the information is presented. For instance, it is easier to explain what a icosahedron is showing a 20 faces dice that with a verbal description. Extraneous cognitive load is unnecessary and should be avoided.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Germane cognitive load&lt;/strong&gt;: this is the brain capacity that we employ to build and process new schemas.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learning materials are designed to minimise extraneous load and maximise germane load.&lt;/p&gt;

&lt;h2 id=&quot;good-software-design-minimises-cognitive-load&quot;&gt;Good software design minimises cognitive load&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Software design principles are mostly attempts to minimise cognitive load&lt;/strong&gt;. Good design simplifies making changes to existing code by limiting the amount of context you have to hold in your working memory. If in order to change a class you need to understand 12 other classes that use it, you will find very difficult to hold all that information in the working memory and make the change. It is much more likely that you’ll make a mistake.&lt;/p&gt;

&lt;p&gt;Good design always tries to avoid cognitive overload. For instance we can use encapsulation; we provide abstractions and clear interfaces to hide the underlying complexity. To make a change in a well encapsulated code you only need to understand the exposed API, you don’t have to understand how the client code works or the details of the implementation. That makes the easier for your brain to hold the necessary information in the working memory and reason about it without errors.&lt;/p&gt;

&lt;p&gt;Encapsulation is never perfect. &lt;a href=&quot;https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/&quot;&gt;Abstractions leak&lt;/a&gt;, and and often you have to worry about how an API is implemented, but it’s the best we can do to keep cognitive load controlled.&lt;/p&gt;

&lt;p&gt;Sometimes we also hear the opposite advice. For instance, we &lt;a href=&quot;https://dhh.dk//2014/test-induced-design-damage.html&quot;&gt;can make our tests run faster if we are willing to pay a price in added complexity&lt;/a&gt;. I like fast tests like anyone else but I’m always very wary of trading speed for complexity. Computer cycles are cheap and easily scalable. &lt;strong&gt;Computer power can scale&lt;/strong&gt; horizontally (buying more computers) or vertically (buying more powerful computers). But &lt;strong&gt;your brain capacity is mostly fixed and painfully limited&lt;/strong&gt;. In programming, the brain is often the  main bottleneck.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/articles/2019/01/18/cognitive-load-in-programming.html</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019/01/18/cognitive-load-in-programming.html</guid>
        
        
        <category>articles</category>
        
      </item>
    
      <item>
        <title>A minimalistic foundation for a Rails REST API</title>
        <description>&lt;p&gt;While working on &lt;a href=&quot;https://www.gazpachoapp.com&quot;&gt;Gazpacho&lt;/a&gt; I came to a point where
I started to think it would be nice to have an API. Over the years I’ve worked
with big Rails applications in which the base API controller had hundreds of lines of
code and used dozens of auxiliary classes. But in my case requirements are very simple: I’m in control of all the clients that will consume the API, so I don’t need any sophisticated authentication mechanism and I can live with bare bone error messages without worrying about leaking too much information. This is as simple as it gets and I started to wonder what is the bare minimum I would need to build that simple REST API (I don’t
need the added complexity of a GraphQL API, thank you very much). After finishing the API I was so pleased
with the minimalism of the result that I thought I’d share it in case someone else find it useful.&lt;/p&gt;

&lt;p&gt;The base controller is only ~ 40LOC (19 SLOC):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Authentication&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;RECORDS_PER_PAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;skip_before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_authenticity_token&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rescue_from&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordInvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordNotDestroyed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render_validation_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_validation_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: :unprocessable_entity&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Follows RFC5988 convention https://tools.ietf.org/html/rRFC5988&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RECORDS_PER_PAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_page?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;page: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prev_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;; rel=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last_page?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;page: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;; rel=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;X-Total-Count&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;total_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It handles pagination and error rendering. For pagination I’m using &lt;a href=&quot;https://github.com/kaminari/kaminari&quot;&gt;Kaminari&lt;/a&gt; and including the pagination info in &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; headers,
following the &lt;a href=&quot;https://tools.ietf.org/html/rfc5988&quot;&gt;RFC5988 specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s also a minimal module to implement token authentication (that’s all I really need).&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Authentication&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Concern&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;included&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authenticate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;authenticate_or_request_with_http_token&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;api_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to Rails sensible defaults, I can create very slick REST controllers just with that foundation. For instance, a typical controller would be around 40LOC and look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FoodsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BaseController&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:load_food&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@foods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;show&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@food&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@food&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;destroy!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_food&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;food_params&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:food&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can perform all the basic REST actions (list, show, create, update and delete) and print responses and validation errors in json format. The views are &lt;a href=&quot;https://github.com/rails/jbuilder&quot;&gt;jbuilder&lt;/a&gt; templates, and again quite simple.&lt;/p&gt;

&lt;p&gt;And that’s all there is to it! Pretty simple, isn’t it?&lt;/p&gt;

&lt;p&gt;Of course, if I start to need more features the code will become more complicated. But I think &lt;a href=&quot;https://personalmba.com/galls-law/&quot;&gt;Gall’s Law&lt;/a&gt; applies here too:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A complex system that works is invariably found to have evolved from a simple system that worked.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;John Gall, systems theorist&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If I ever build a more complex API that works, it will be the evolution of a simple API that works.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/articles/2019/01/09/minimalistic-rails-api.html</link>
        <guid isPermaLink="true">http://localhost:4000/articles/2019/01/09/minimalistic-rails-api.html</guid>
        
        
        <category>articles</category>
        
      </item>
    
  </channel>
</rss>
